[How-to-use]
Ce projet a été créé à l'aide d'une librairie graphique, qui utilise SDL.
Pour pouvoir tester le jeu, il faut donc installer les paquets suivants sur un système Debian: libsdl1.2debian, libsdl1.2-dev, libsdl-ttf2.0-0, libsdl-ttf2.0-dev.

Ensuite, se rendre dans le dossier pacman, éxécuter les commandes suivantes:
make
./start.sh

Bon jeu! 

[Déplacement joueur]
Le squelette du projet étant bien fait et compréhensible, une fois compris, tout s"est à peu près bien passé: à part l'inversion entre Pos{l,c} et Point{x,y} qui a causé pas mal de soucis. Une fois résolue, l'implémentation des tunnels s'est bien passée, ils fonctionnent d'ailleurs horizontalement et verticalement (cf niveau 3).

[Enregistrement / Gestion des scores]

L'interaction avec le système en C est assez compliqué, je n'aurait jamais pensé que faire une boucle while avec un fscanf dedans pourrait parcourir les lignes d'un fichier, tout ça n'était pas très intuitif et l'enregistrement des scores s'est donc avéré assez compliqué. Pour le visionnage des scores, un algorithme de tri va trier tous les scores dans le fichier data/scores et les 10 meilleurs seront affichés à l'écran, le tri par bulle s'est avéré être une bonne solution car il est simple à implémenter et même si ce n'est pas le plus rapide, on parle là d'un tableau de score qui ne peut en contenir que 500, donc cela importe peu.
A la fin de la partie, on demande donc le nom d'utilisateur dans la CLI et ce nom sera associé au score. Cependant, les scores prennent + 30 000 quelquefois, bug non résolu, peut-être s'agirait-il d'un \n oublié?
Sinon, tout fonctionne.


[Graphismes]
Nous sommes restés sobres pour les graphiqmes du menu, il est fonctionnel et c'est ce qui nous intéresse, de plus, nous nous sommes concentrés sur une taille de fenêtre précise: 675*525 pixels pour avoir des cases de 25*25 pixels et donc faire des jolis sprites, qui ne s'adapteraient pas à une taille de fenêtre différente /// A TOI DE JOUER
